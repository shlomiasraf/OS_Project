        -:    0:Source:CommandExecute.cpp
        -:    1:#include "CommandExecute.hpp"
        -:    2:#include <iostream>
        -:    3:#include <sstream>
        -:    4:#include <cstring>
        -:    5:#include <unistd.h>
        -:    6:
function _ZN14CommandExecute14processCommandEi7Command called 7 returned 100% blocks executed 100%
        7:    7:Command CommandExecute::processCommand(int client_fd, Command command) {
        7:    8:        switch (command) { 	     
branch  0 taken 14%
branch  1 taken 14%
branch  2 taken 14%
branch  3 taken 29%
branch  4 taken 14%
branch  5 taken 14%
        1:    9:      	     case Command::Newgraph:
        1:   10:                Newgraph(client_fd);
call    0 returned 100%
        1:   11:                break;
        -:   12:      	     
        1:   13:            case Command::Addedge:
        1:   14:                AddEdge(client_fd);
call    0 returned 100%
        1:   15:                break;
        -:   16:            
        1:   17:            case Command::Removeedge:
        1:   18:                RemoveEdge(client_fd);
call    0 returned 100%
        1:   19:                break;
        -:   20:     
        2:   21:            case Command::Prim:
        -:   22:            case Command::Kruskal:
        2:   23:                getMSTAlgorithm(command, client_fd);
call    0 returned 100%
        2:   24:                break;
        1:   25:             case Command::Exit:
        1:   26:             	break;
        1:   27:            default:     
        1:   28:                break;
        -:   29:      		  }
        7:   30:    return command;
        -:   31:}
        -:   32:
function _ZN14CommandExecute7AddEdgeEi called 1 returned 100% blocks executed 68%
        1:   33:void CommandExecute::AddEdge(int client_fd) {
        -:   34:
        1:   35:    std::string message = "Enter edge to add (i, j, weight): \n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   36:    std::cout << std::flush;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   37:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:   38:    char buf[256];
        1:   39:    int nbytes = recv(client_fd, buf, sizeof(buf) - 1, 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   40:    buf[nbytes] = '\0';
        -:   41:    int u, v, weight;
        1:   42:    std::istringstream edgeIss(buf);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:   43:    edgeIss >> u >> v >> weight;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        1:   44:    if(u <= graph.V && v <= graph.V)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   45:    {
        1:   46:        graph.addEdge(u - 1, v - 1, weight);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   47:        message = "Edge was created successfully!\n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   48:    }
        -:   49:    else
        -:   50:    {
    #####:   51:        message = "Invalid edge\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   52:    }
        -:   53:
        1:   54:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        1:   55:}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        -:   56:
function _ZN14CommandExecute10RemoveEdgeEi called 1 returned 100% blocks executed 67%
        1:   57:void CommandExecute::RemoveEdge(int client_fd) {
        -:   58:    int i, j;
        1:   59:    std::string message = "Enter edge to remove (i j): \n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   60:    std::cout << std::flush;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   61:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:   62:    char buf[256];
        1:   63:    int nbytes = recv(client_fd, buf, sizeof(buf) - 1, 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   64:    buf[nbytes] = '\0';
        1:   65:    std::istringstream edgeIss(buf);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:   66:    edgeIss >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:   67:    if(i <= graph.V && j <= graph.V)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   68:    {
        1:   69:        graph.removeEdge(i - 1, j - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   70:        message = "Edge was removed successfully!\n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   71:    }
        -:   72:    else
        -:   73:    {
    #####:   74:        message = "Invalid edge\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   75:    }
        -:   76:
        1:   77:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        1:   78:}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        -:   79:
function _ZN14CommandExecute8NewgraphEi called 1 returned 100% blocks executed 67%
        1:   80:void CommandExecute::Newgraph(int client_fd) {
        -:   81:    int vertex, edges;
        1:   82:    std::lock_guard<std::mutex> lock(resultMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   83:
        1:   84:    std::string message = "Please enter the number of vertices and edges: \n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   85:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        1:   86:    fflush(stdout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   87:    char buf[256];
        1:   88:    std::string input;
call    0 returned 100%
        1:   89:    memset(buf, 0, sizeof(buf));
        -:   90:    // Read vertices and edges
        1:   91:    int nbytes = recv(client_fd, buf, sizeof(buf) - 1, 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   92:    if (nbytes <= 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   93:        std::cerr << "Error receiving data from client.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   94:        return;
        -:   95:    }
        1:   96:    message = "Enter edges to add (i, j, weight): \n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   97:    buf[nbytes] = '\0';
        1:   98:    input = buf;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   99:    std::istringstream iss(input);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  100:    if (!(iss >> vertex >> edges)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  101:        std::cerr << "Error parsing vertex/edges input.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  102:        return;
        -:  103:    }
        1:  104:    graph = Graph(vertex, edges);   
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  105:    memset(buf, 0, sizeof(buf));
        1:  106:    message = "Please enter the edges (u v weight): \n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  107:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        1:  108:    fflush(stdout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  109:    // Read edges
        4:  110:    for (int i = 0; i < edges; ++i) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  111:        input.clear();
call    0 returned 100%
        3:  112:        memset(buf, 0, sizeof(buf));
        3:  113:        nbytes = recv(client_fd, buf, sizeof(buf) - 1, 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  114:        if (nbytes <= 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  115:            std::cerr << "Error receiving edge data.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  116:            return;
        -:  117:        }
        3:  118:        buf[nbytes] = '\0';
        3:  119:        input = buf;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  120:
        -:  121:        int u, v, weight;
        3:  122:        std::istringstream edgeStream(input);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       3*:  123:        if (!(edgeStream >> u >> v >> weight)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####:  124:            message = "Invalid edge input format. Please retry.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  125:            send(client_fd, message.c_str(), message.size(), 0);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  126:            fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  127:            --i;  // Retry this edge
    #####:  128:            continue;
        -:  129:        }
        -:  130:
        3:  131:       graph.addEdge(u - 1, v - 1, weight);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  132:    }
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 never executed
        -:  133:
        1:  134:    message = "Graph created successfully.\n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  135:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        1:  136:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -:  137:
function _ZN14CommandExecute15getMSTAlgorithmE7Commandi called 2 returned 100% blocks executed 51%
        2:  138:void CommandExecute::getMSTAlgorithm(Command type, int client_fd) {
        2:  139:    std::string message;
call    0 returned 100%
        2:  140:    if(graph.V<2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  141:         message = "Cannot Compute MST on Graphs that vertics number lower than 2.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  142:         send(client_fd, message.c_str(), message.size(), 0);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  143:         return;
        -:  144:    }
        2:  145:    if (type == Command::Prim) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3:  146:        LF.Compute(graph,client_fd,"prim");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:  147:    } else if (type == Command::Kruskal) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  148:        LF.Compute(graph,client_fd,"Kruskal");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  149:    } else {
    #####:  150:        message = "Invalid MST command.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  151:        send(client_fd, message.c_str(), message.size(), 0);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -:  152:    }
        2:  153:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 never executed
        -:  154:
        -:  155:
