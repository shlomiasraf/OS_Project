        -:    0:Source:LFCompute.cpp
        -:    1:#include "LFCompute.hpp"
        -:    2:LFCompute* LFCompute::instance = nullptr;
        -:    3:std::mutex LFCompute::creation;
        -:    4:
        -:    5:
function _ZN9LFComputeC2Ev called 1 returned 100% blocks executed 73%
        1:    6:LFCompute::LFCompute() : pool(10){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
call    9 never executed
        -:    7:
function _ZN9LFCompute11getInstanceEv called 2 returned 100% blocks executed 64%
        2:    8:LFCompute &LFCompute::getInstance()
        -:    9:{
        -:   10:    
        2:   11:  std::unique_lock<std::mutex> lock(creation);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   12:    if (instance == nullptr) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   13:        instance = new LFCompute(); // Assign new instance if null
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 never executed (fallthrough)
branch  7 never executed
call    8 never executed
        -:   14:    }
        2:   15:    return *instance; // Return the instance}
        -:   16:    
        2:   17:}
call    0 returned 100%
call    1 never executed
        -:   18:
function _ZN9LFCompute7ComputeER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 48%
        2:   19:void LFCompute::Compute(Graph &graph, int clientfd, std::string type) {
        2:   20:    MSTResult result({}, 0, 0, 0);  
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:   21:    // Enqueue a single task that performs all the operations sequentially
function _ZZN9LFCompute7ComputeER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENUlvE_clEv called 2 returned 100% blocks executed 83%
        2:   22:    pool.enqueue([this, &graph, clientfd, type,  result = std::move(result)]() mutable {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed
call   17 never executed
        2:   23:        std::string message;
call    0 returned 100%
        -:   24:        //message="abcdef";
        -:   25:      //dd  threadSafePrint(message);
        -:   26:
        -:   27:        // Task: Calculate MST using Kruskal or Prim
        2:   28:        if (type == "Kruskal") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        1:   29:            message = "Calculating MST Using Kruskal Algo...";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   30:            threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   31:            KruskalMST kruskalInstance;
        1:   32:            result.mst = kruskalInstance.kruskalFunction(graph);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:   33:        } else {
        1:   34:            message = "Calculating MST Using Prim Algo...";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   35:            threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   36:            PrimMST primInstance;
        1:   37:            result.mst = primInstance.primFunction(graph);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:   38:        }
        2:   39:        message = "MST calculation complete.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   40:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   41:    
        -:   42:        // Task: Calculate total weight
        2:   43:        result.totalWeight = MSTInfo::calculateTotalWeight(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:   44:        message = "Total weight calculation complete.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   45:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   46:
        -:   47:        // Task: Calculate average distance
        2:   48:        result.averageDistance = MSTInfo::calculateAverageDistance(result.totalWeight, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:   49:        message = "Average distance calculation complete.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   50:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   51:
        -:   52:        // Task: Calculate longest distance
        2:   53:        result.longestDistance = MSTInfo::findLongestDistance(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:   54:        message = "Longest distance calculation complete.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   55:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   56:
        -:   57:        // Task: Calculate shortest distance
        2:   58:        result.shortestDistance = MSTInfo::calculateShortestDistance(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:   59:        message = "Shortest distance calculation complete.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   60:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   61:
        -:   62:        // Task: Send MST details to the client
        2:   63:        result.sendMSTDetails(clientfd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   64:        message = "MST details sent to client.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   65:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   66:        taskCompleted.store(true);
call    0 returned 100%
        -:   67:
        -:   68:        // Notify client
        -:   69:        {
        2:   70:            std::unique_lock<std::mutex> lock(clientMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _ZZZN9LFCompute7ComputeER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENUlvE_clEvENKUlvE_clEv called 2 returned 100% blocks executed 100%
        4:   71:            clientCv.wait(lock, [&] { return taskCompleted.load() == true; }); // Wait until the task is completed
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   72:        }
call    0 returned 100%
call    1 never executed
        2:   73:    });
call    0 returned 100%
call    1 never executed
        2:   74:}
call    0 returned 100%
call    1 never executed
        -:   75:
function _ZN9LFCompute15threadSafePrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 14 returned 100% blocks executed 75%
       14:   76:void LFCompute::threadSafePrint(const std::string& message) {
       14:   77:    std::lock_guard<std::mutex> lock(coutMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:   78:    std::cout << message << std::endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       14:   79:}
call    0 returned 100%
call    1 never executed
        -:   80:
function _ZN9LFComputeD2Ev called 0 returned 0% blocks executed 0%
    #####:   81:LFCompute::~LFCompute() {
    #####:   82:    cleanup();  // Ensure cleanup when LFCompute is destroyed
call    0 never executed
    #####:   83:}
call    0 never executed
call    1 never executed
call    2 never executed
        -:   84:
function _ZN9LFCompute7cleanupEv called 1 returned 100% blocks executed 100%
        1:   85:void LFCompute::cleanup() {
        -:   86:   // std::unique_lock<std::mutex> lock(creation);
        1:   87:    pool.shutdown();  // Ensure the thread pool stops accepting new tasks and completes ongoing ones
call    0 returned 100%
        -:   88:   // delete instance;
        -:   89:    //instance = nullptr;
        1:   90:}
