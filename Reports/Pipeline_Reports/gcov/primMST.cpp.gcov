        -:    0:Source:primMST.cpp
        -:    1:#include <iostream>
        -:    2:#include <vector>
        -:    3:#include <limits.h>
        -:    4:#include <stack>
        -:    5:#include <queue>
        -:    6:#include "Graph.hpp"
        -:    7:#include "primMST.hpp"
        -:    8:#include <sys/socket.h>
        -:    9:#include <sstream>
        -:   10:#define INF INT_MAX
        -:   11:
        -:   12:// Function to find the vertex with the minimum key value
function _Z6minKeyRKSt6vectorIiSaIiEERKS_IbSaIbEEi called 2 returned 100% blocks executed 100%
        2:   13:int minKey(const std::vector<int>& key, const std::vector<bool>& mstSet, int V) {
        2:   14:    int min = INF, min_index = -1;
        -:   15:
        8:   16:    for (int v = 0; v < V; v++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6:   17:        if (!mstSet[v] && key[v] < min) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 60% (fallthrough)
branch  5 taken 40%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
        3:   18:            min = key[v];
call    0 returned 100%
        3:   19:            min_index = v;
        -:   20:        }
        -:   21:    }
        2:   22:    return min_index;
        -:   23:}
        -:   24:
        -:   25:// Prim's algorithm for constructing the MST
function _ZN7PrimMST12primFunctionER5Graph called 1 returned 100% blocks executed 64%
        1:   26:std::vector<std::vector<std::pair<int, int>>> PrimMST::primFunction(Graph& graph) 
        -:   27:{
        1:   28:    int V = graph.V;
        -:   29:    
        1:   30:    if (V == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   31:        std::cerr << "Error: Graph is empty!" << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:   32:        static std::vector<std::vector<std::pair<int, int>>> emptyMST;
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:   33:        return emptyMST;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   34:    }
        -:   35:
        2:   36:    std::vector<int> parent(V);  // Array to store the constructed MST
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   37:    std::vector<int> key(V, INF); // Key values used to pick minimum weight edge
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:   38:    std::vector<bool> mstSet(V, false); // To represent the set of vertices included in MST
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:   39:    key[0] = 0; // Start with the first vertex
call    0 returned 100%
        1:   40:    parent[0] = -1; // The first node is always the root of the MST
call    0 returned 100%
        -:   41:
        3:   42:    for (int count = 0; count < V - 1; count++) 
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   43:    {
        2:   44:        int u = minKey(key, mstSet, V); // Pick the minimum key vertex
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   45:        mstSet[u] = true;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:   46:
        -:   47:        // Update key and parent for adjacent vertices
        8:   48:        for (int v = 0; v < V; v++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   49:            // Check if there is an edge between u and v in the original graph, 
        -:   50:            // if v is not in the MST, and if the weight is less than the current key value for v
        6:   51:            if (graph.adjList[u][v] && !mstSet[v] && graph.adjList[u][v] < key[v]) 
call    0 returned 100%
call    1 returned 100%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 75% (fallthrough)
branch  9 taken 25%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
branch 15 taken 50% (fallthrough)
branch 16 taken 50%
        -:   52:            {
        3:   53:                parent[v] = u; // Update the parent of v to u
call    0 returned 100%
        3:   54:                key[v] = graph.adjList[u][v]; // Update the key to reflect the new minimum weight
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   55:            }
        -:   56:        }
        -:   57:    }
        -:   58:
        1:   59:    std::vector<std::vector<std::pair<int, int>>> mstAdjList(V);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:   60:    for (int i = 1; i < V; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:   61:        int u = parent[i];
call    0 returned 100%
        2:   62:        if (u != -1) { // Ensure a valid parent before adding to the MST
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   63:            int weight = graph.adjList[u][i];
call    0 returned 100%
call    1 returned 100%
        2:   64:            mstAdjList[u].emplace_back(i, weight);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:   65:            mstAdjList[i].emplace_back(u, weight);  // Since the graph is undirected
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:   66:        }
        -:   67:    }
        -:   68:
        1:   69:    return mstAdjList;
call    0 returned 100%
        1:   70:}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
