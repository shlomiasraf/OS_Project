        -:    0:Source:Pipeline.cpp
        -:    1:#include "Pipeline.hpp"
        -:    2:
        -:    3:Pipeline* Pipeline::instance = nullptr;
        -:    4:std::mutex Pipeline::creation;
        -:    5:
function _ZN8Pipeline11getInstanceEv called 2 returned 100% blocks executed 64%
        2:    6:Pipeline& Pipeline::getInstance() {
        2:    7:    std::unique_lock<std::mutex> lock(creation);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:    8:    if (instance == nullptr) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:    9:        instance = new Pipeline(); // Assign new instance if null
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 never executed (fallthrough)
branch  7 never executed
call    8 never executed
        -:   10:    }
        2:   11:    return *instance; // Return the instance
        2:   12:}
call    0 returned 100%
call    1 never executed
        -:   13:
function _ZN8PipelineC2Ev called 1 returned 100% blocks executed 67%
        1:   14:Pipeline::Pipeline() {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
        -:   15:    // Emplace back to create instances of ActiveObject
        7:   16:    for (int i = 0; i < 6; ++i) {
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:   17:        executors.emplace_back(std::make_unique<ActiveObject>());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:   18:    }
        -:   19:    // Start each executor
        7:   20:    for (auto& executor : executors) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 86%
branch  6 taken 14% (fallthrough)
        6:   21:        executor->start();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:   22:    }
        1:   23:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
function _ZN8Pipeline7cleanupEv called 1 returned 100% blocks executed 100%
        1:   24:void Pipeline::cleanup() {
        1:   25:    std::unique_lock<std::mutex> lock(creation);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   26:    delete instance;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
        1:   27:    instance = nullptr;
        1:   28:}
call    0 returned 100%
        -:   29:
function _ZN8PipelineD2Ev called 1 returned 100% blocks executed 100%
        1:   30:Pipeline::~Pipeline() {
        7:   31:    for (auto& executor : executors) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 86%
branch  6 taken 14% (fallthrough)
        6:   32:        executor->stop(); // Assuming you have a stop method
call    0 returned 100%
call    1 returned 100%
        -:   33:    }
        1:   34:}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   35:
function _ZN8Pipeline15threadSafePrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 14 returned 100% blocks executed 75%
       14:   36:void Pipeline::threadSafePrint(const std::string& message) {
       14:   37:    std::lock_guard<std::mutex> lock(coutMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:   38:    std::cout << message << std::endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       14:   39:}
call    0 returned 100%
call    1 never executed
        -:   40:
function _ZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 44%
        2:   41:void Pipeline::run(Graph& graph, int clientfd, std::string type) {
        2:   42:    MSTResult result({}, 0, 0, 0);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:   43:    // Create a mutex for this specific client
        2:   44:    std::mutex clientMutex;
        2:   45:    std::condition_variable clientCv;
call    0 returned 100%
        2:   46:    std::atomic<int> completedTasks{0};
        -:   47:
        -:   48:    // Notify and increment
function _ZZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlvE_clEv called 12 returned 100% blocks executed 100%
       12:   49:    auto notifyAndIncrement = [&]() {
       12:   50:        std::lock_guard<std::mutex> lock(clientMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:   51:        completedTasks++;
call    0 returned 100%
       12:   52:        clientCv.notify_all();
call    0 returned 100%
       14:   53:    };
call    0 returned 100%
        -:   54:
        -:   55:    // Vector to hold task completion status
        2:   56:    std::vector<bool> taskCompletionStatus(6, false); // Assuming 6 tasks
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:   57:
function _ZZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSt8functionIFvvEEiE_clESA_i called 12 returned 100% blocks executed 82%
       12:   58:    auto passTask = [&](std::function<void()> taskFunction, int dependencyIndex = -1) {
       12:   59:        if (dependencyIndex != -1) {
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       10:   60:            std::unique_lock<std::mutex> lock(clientMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _ZZZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSt8functionIFvvEEiE_clESA_iENKUlvE_clEv called 10 returned 100% blocks executed 68%
       30:   61:            clientCv.wait(lock, [&] { return completedTasks.load() > dependencyIndex; });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
       10:   62:        }
call    0 returned 100%
call    1 never executed
        -:   63:
        -:   64:        // Directly call the task function instead of using std::async
       12:   65:        taskFunction();
call    0 returned 100%
       12:   66:        notifyAndIncrement();
call    0 returned 100%
       12:   67:    };
        -:   68:
        -:   69:    // Task 1: Calculate MST
function _ZZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlvE0_clEv called 2 returned 100% blocks executed 57%
        2:   70:    passTask([&, type]() {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed
call   15 never executed
        -:   71:        try {
        2:   72:            std::string message;
call    0 returned 100%
        2:   73:            if (type == "Kruskal") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        1:   74:                message = "Calculating MST Using Kruskal Algo...";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   75:                threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   76:                KruskalMST kruskalInstance;
        1:   77:                result.mst = kruskalInstance.kruskalFunction(graph);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:   78:            } else {
        1:   79:                message = "Calculating MST Using Prim Algo...";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   80:                threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   81:                PrimMST primInstance;
        1:   82:                result.mst = primInstance.primFunction(graph);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:   83:            }
        2:   84:            message = "Finish task 1";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   85:            threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   86:        } catch (const std::exception &e) {
call    0 returned 100%
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
call    4 never executed
    =====:   87:            std::cerr << "Error in Task 1: " << e.what() << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    =====:   88:        }
call    0 never executed
call    1 never executed
        2:   89:    });
        -:   90:
        -:   91:    // Task 2: Calculate Total Weight
function _ZZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlvE1_clEv called 2 returned 100% blocks executed 67%
        2:   92:    passTask([&]() {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        2:   93:        result.totalWeight = MSTInfo::calculateTotalWeight(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:   94:        std::string message = "Finish task 2";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   95:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   96:    }, 0);
call    0 returned 100%
call    1 never executed
        -:   97:
        -:   98:    // Task 3: Calculate Average Distance
function _ZZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlvE2_clEv called 2 returned 100% blocks executed 67%
        2:   99:    passTask([&]() {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        2:  100:        result.averageDistance = MSTInfo::calculateAverageDistance(result.totalWeight, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  101:        std::string message = "Finish task 3";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  102:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  103:    }, 1);
call    0 returned 100%
call    1 never executed
        -:  104:
        -:  105:    // Task 4: Calculate Longest Distance
function _ZZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlvE3_clEv called 2 returned 100% blocks executed 67%
        2:  106:    passTask([&]() {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        2:  107:        result.longestDistance = MSTInfo::findLongestDistance(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  108:        std::string message = "Finish task 4";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  109:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  110:    }, 2);
call    0 returned 100%
call    1 never executed
        -:  111:
        -:  112:    // Task 5: Calculate Shortest Distance
function _ZZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlvE4_clEv called 2 returned 100% blocks executed 67%
        2:  113:    passTask([&]() {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        2:  114:        result.shortestDistance = MSTInfo::calculateShortestDistance(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  115:        std::string message = "Finish task 5";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  116:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  117:    }, 3);
call    0 returned 100%
call    1 never executed
        -:  118:
        -:  119:    // Task 6: Send Info
function _ZZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlvE5_clEv called 2 returned 100% blocks executed 64%
        2:  120:    passTask([&, clientfd]() {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  121:        result.sendMSTDetails(clientfd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  122:        std::string message = "Finish task 6";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  123:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  124:    }, 4);\
call    0 returned 100%
call    1 never executed
        -:  125:    
        -:  126:       // Wait for all tasks to complete
        -:  127:    {
        2:  128:        std::unique_lock<std::mutex> lock(clientMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _ZZN8Pipeline3runER5GraphiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlvE6_clEv called 2 returned 100% blocks executed 68%
        6:  129:        clientCv.wait(lock, [&] { return completedTasks.load() == 6; }); // Wait until all tasks are completed
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  130:    }
call    0 returned 100%
call    1 never executed
        2:  131:}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 never executed
call    4 never executed
call    5 never executed
