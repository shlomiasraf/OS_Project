        -:    0:Source:ActiveObject.cpp
        -:    1:#include "ActiveObject.hpp"
        -:    2:
function _ZN12ActiveObjectC2Ev called 6 returned 100% blocks executed 70%
        6:    3:ActiveObject::ActiveObject() : stopRequested_(false) {}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 never executed
call    8 never executed
        -:    4:
function _ZN12ActiveObjectD2Ev called 6 returned 100% blocks executed 100%
        6:    5:ActiveObject::~ActiveObject() {
        6:    6:    stop(); // Ensure that the worker thread is stopped in the destructor
call    0 returned 100%
        6:    7:}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    8:
function _ZN12ActiveObject5startEv called 6 returned 100% blocks executed 71%
        6:    9:void ActiveObject::start() {
        6:   10:    worker_ = std::thread(&ActiveObject::process, this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        6:   11:}
        -:   12:
function _ZN12ActiveObject4stopEv called 12 returned 100% blocks executed 100%
       12:   13:void ActiveObject::stop() {
        -:   14:    {
       12:   15:        std::lock_guard<std::mutex> lock(mutex_); // Protect the task queue
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:   16:        stopRequested_ = true; // Set stop request flag
call    0 returned 100%
       12:   17:        condition_.notify_all(); // Notify the worker thread to wake up if waiting
call    0 returned 100%
       12:   18:    }
call    0 returned 100%
       12:   19:    if (worker_.joinable()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        6:   20:        worker_.join(); // Wait for the worker thread to finish
call    0 returned 100%
        -:   21:    }
       12:   22:}
        -:   23:
function _ZN12ActiveObject7enqueueESt8functionIFvvEE called 0 returned 0% blocks executed 0%
    #####:   24:void ActiveObject::enqueue(std::function<void()> task) {
        -:   25:    {
    #####:   26:        std::lock_guard<std::mutex> lock(mutex_); // Protect the task queue
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   27:        tasks_.push(std::move(task)); // Add the task to the queue
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:   28:        condition_.notify_one(); // Notify the worker thread that a task is available
call    0 never executed
    #####:   29:}
call    0 never executed
call    1 never executed
    #####:   30:}
        -:   31:
        -:   32:
function _ZN12ActiveObject7processEv called 6 returned 100% blocks executed 54%
        6:   33:void ActiveObject::process() {
        -:   34:    while (true) {
        6:   35:        std::function<void()> task;
call    0 returned 100%
        -:   36:
        -:   37:        {
        6:   38:            std::unique_lock<std::mutex> lock(mutex_);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   39:            // Wait until there's a task or a stop request
function _ZZN12ActiveObject7processEvENKUlvE_clEv called 12 returned 100% blocks executed 100%
        6:   40:            condition_.wait(lock, [this] {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:   41:                return stopRequested_ || !tasks_.empty();
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   42:            });
        -:   43:
       6*:   44:            if (stopRequested_ && tasks_.empty()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       12:   45:                return; // Exit if stop is requested and no tasks are left
        -:   46:            }
        -:   47:
        -:   48:            // Get the task from the queue
    #####:   49:            task = std::move(tasks_.front());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   50:            tasks_.pop();
call    0 never executed
       6*:   51:        }
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   52:
    #####:   53:            task(); // Execute the task outside of the lock
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
       6*:   54:    }
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   55:}
