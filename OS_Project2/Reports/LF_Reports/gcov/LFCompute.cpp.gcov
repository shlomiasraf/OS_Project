        -:    0:Source:LFCompute.cpp
        -:    1:#include "LFCompute.hpp"
        -:    2:#include "MSTFactory.hpp"
        -:    3:LFCompute* LFCompute::instance = nullptr;
        -:    4:std::mutex LFCompute::creation;
        -:    5:
        -:    6:
function _ZN9LFComputeC2Ev called 1 returned 100% blocks executed 73%
        1:    7:LFCompute::LFCompute() : pool(10){};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
call    9 never executed
        -:    8:
function _ZN9LFCompute11getInstanceEv called 2 returned 100% blocks executed 64%
        2:    9:LFCompute &LFCompute::getInstance()
        -:   10:{
        -:   11:    
        2:   12:  std::unique_lock<std::mutex> lock(creation);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   13:    if (instance == nullptr) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   14:        instance = new LFCompute(); // Assign new instance if null
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 never executed (fallthrough)
branch  7 never executed
call    8 never executed
        -:   15:    }
        2:   16:    return *instance; // Return the instance}
        -:   17:    
        2:   18:}
call    0 returned 100%
call    1 never executed
        -:   19:
function _ZN9LFCompute7ComputeER5Graphi7Command called 2 returned 100% blocks executed 52%
        2:   20:void LFCompute::Compute(Graph &graph, int clientfd, Command type)
        -:   21:{
        -:   22:   
        2:   23:    MSTResult result({}, 0, 0, 0);  
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:   24:    // Enqueue a single task that performs all the operations sequentially
function _ZZN9LFCompute7ComputeER5Graphi7CommandENUlvE_clEv called 2 returned 100% blocks executed 81%
        4:   25:    pool.enqueue([this, &graph, clientfd, type,result = std::move(result)]() mutable {        std::string message;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 returned 100%
        -:   26:        
        2:   27:        message = "Calculating MST...";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   28:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   29:        auto mstAlgo = MSTFactory::create(type); // Assuming this returns a unique_ptr<MSTAlgo>
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   30:        // Calculate MST using the provided MSTAlgo instance
        2:   31:        result.mst = mstAlgo->FindMST(graph);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
        -:   32:    
        -:   33:        // Task: Calculate total weight
        2:   34:        result.totalWeight = MSTInfo::calculateTotalWeight(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:   35:        message = "Total weight calculation complete.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   36:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   37:
        -:   38:        // Task: Calculate average distance
        2:   39:        result.averageDistance = MSTInfo::calculateAverageDistance(result.totalWeight, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:   40:        message = "Average distance calculation complete.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   41:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   42:
        -:   43:        // Task: Calculate longest distance
        2:   44:        result.longestDistance = MSTInfo::findLongestDistance(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:   45:        message = "Longest distance calculation complete.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   46:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   47:
        -:   48:        // Task: Calculate shortest distance
        2:   49:        result.shortestDistance = MSTInfo::calculateShortestDistance(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:   50:        message = "Shortest distance calculation complete.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   51:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   52:
        -:   53:        // Task: Send MST details to the client
        2:   54:        result.sendMSTDetails(clientfd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   55:        message = "MST details sent to client.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   56:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   57:        taskCompleted.store(true);
call    0 returned 100%
        -:   58:
        -:   59:        // Notify client
        -:   60:        {
        2:   61:            std::unique_lock<std::mutex> lock(clientMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _ZZZN9LFCompute7ComputeER5Graphi7CommandENUlvE_clEvENKUlvE_clEv called 2 returned 100% blocks executed 100%
        4:   62:            clientCv.wait(lock, [&] { return taskCompleted.load() == true; }); // Wait until the task is completed
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   63:        }
call    0 returned 100%
call    1 never executed
        2:   64:    });
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        2:   65:}
call    0 returned 100%
call    1 never executed
        -:   66:
        -:   67:
function _ZN9LFCompute15threadSafePrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 75%
       12:   68:void LFCompute::threadSafePrint(const std::string &message)
        -:   69:{
       12:   70:    std::lock_guard<std::mutex> lock(coutMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:   71:    std::cout << message << std::endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       12:   72:}
call    0 returned 100%
call    1 never executed
        -:   73:
function _ZN9LFComputeD2Ev called 1 returned 100% blocks executed 100%
        1:   74:LFCompute::~LFCompute() {
        1:   75:    cleanup();  // Ensure cleanup when LFCompute is destroyed
call    0 returned 100%
        1:   76:}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   77:
function _ZN9LFCompute7cleanupEv called 2 returned 100% blocks executed 100%
        2:   78:void LFCompute::cleanup() {
        2:   79:    if (isCleaningUp) return; // Prevent recursive cleanup
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   80:    isCleaningUp = true;
        1:   81:    pool.shutdown();  // Ensure the thread pool stops accepting new tasks and completes ongoing ones
call    0 returned 100%
        1:   82:    delete instance;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
        1:   83:    instance = nullptr;
        -:   84:}
