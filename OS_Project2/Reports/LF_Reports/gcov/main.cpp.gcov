        -:    0:Source:main.cpp
        -:    1:#include <iostream>
        -:    2:#include <thread>
        -:    3:#include <vector>
        -:    4:#include <sys/socket.h>
        -:    5:#include <netinet/in.h>
        -:    6:#include <unistd.h>
        -:    7:#include <mutex>
        -:    8:#include <iostream>
        -:    9:#include <poll.h>  
        -:   10:#include <unistd.h> 
        -:   11:#include <atomic>  
        -:   12:#include <string.h>
        -:   13:#include "CommandExecute.hpp"
        -:   14:#define PORT 9034
        -:   15:
        -:   16:std::mutex shutdown_mutex;
        -:   17:std::atomic<bool> shutdown_flag(false); // Global shutdown flag
        -:   18:
function _Z23setup_client_connectioni called 1 returned 100% blocks executed 33%
        1:   19:int setup_client_connection(int server_fd) 
        -:   20:{
        -:   21:    // Accept a new client connection
        1:   22:    int client_fd = accept(server_fd, nullptr, nullptr);
call    0 returned 100%
        1:   23:    if (client_fd < 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   24:        if (errno == EAGAIN || errno == EWOULDBLOCK) {
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:   25:            return 0; // Indicate no client connected
        -:   26:        } else {
    #####:   27:            std::cerr << "Failed to accept client: " << strerror(errno) << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   28:            return -1; // Return -1 for other errors
        -:   29:        }
        -:   30:    }
        1:   31:    return client_fd; // Return the client file descriptor if successful
        -:   32:}
        -:   33:
function _Z20getCommandFromStringRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 92%
        7:   34:Command getCommandFromString(const std::string& commandStr) {
        7:   35:    std::string lowerCommand = commandStr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       7*:   36:    if (!lowerCommand.empty() && lowerCommand.back() == '\n') {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        7:   37:        lowerCommand.pop_back();
call    0 returned 100%
        -:   38:    }
        7:   39:    std::transform(lowerCommand.begin(), lowerCommand.end(), lowerCommand.begin(), ::tolower);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   40:
        7:   41:    if (lowerCommand == "newgraph") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
        1:   42:        return Command::Newgraph;
        6:   43:    } else if (lowerCommand == "prim") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 17% (fallthrough)
branch  4 taken 83%
        1:   44:        return Command::Prim;
        5:   45:    } else if (lowerCommand == "kruskal") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
        1:   46:        return Command::Kruskal;
        4:   47:    } else if (lowerCommand == "addedge") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
        1:   48:        return Command::Addedge;
        3:   49:    } else if (lowerCommand == "removeedge") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
        1:   50:        return Command::Removeedge;
        2:   51:    } else if (lowerCommand == "exit") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        1:   52:        return Command::Exit;
        -:   53:    }
        1:   54:    return Command::Invalid;
        7:   55:}
call    0 returned 100%
call    1 never executed
        -:   56:
function _Z12setup_serverv called 1 returned 100% blocks executed 38%
        1:   57:int setup_server() {
        1:   58:    int server_fd = socket(AF_INET, SOCK_STREAM, 0);
call    0 returned 100%
        1:   59:    if (server_fd == -1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   60:        std::cerr << "Failed to create socket" << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:   61:        exit(EXIT_FAILURE);
call    0 never executed
        -:   62:    }
        -:   63:
        -:   64:    // Set the SO_REUSEADDR option to reuse the port
        1:   65:    int opt = 1;
        1:   66:    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   67:        std::cerr << "setsockopt(SO_REUSEADDR) failed" << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:   68:        exit(EXIT_FAILURE);
call    0 never executed
        -:   69:    }
        -:   70:
        -:   71:    sockaddr_in address;
        1:   72:    address.sin_family = AF_INET;
        1:   73:    address.sin_addr.s_addr = INADDR_ANY;
        1:   74:    address.sin_port = htons(PORT);
        -:   75:
        1:   76:    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   77:        std::cerr << "Bind failed: " << strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    #####:   78:        close(server_fd);  // Ensure we close the socket on failure
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   79:        exit(EXIT_FAILURE);
call    0 never executed
        -:   80:    }
        -:   81:
        1:   82:    if (listen(server_fd, 3) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   83:        std::cerr << "Listen failed: " << strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    #####:   84:        close(server_fd);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   85:        exit(EXIT_FAILURE);
call    0 never executed
        -:   86:    }
        1:   87:    return server_fd;
        -:   88:}
        -:   89:
function _Z13handle_clienti called 1 returned 100% blocks executed 52%
        1:   90:void handle_client(int client_fd) {
        1:   91:    CommandExecute commandExecutor;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   92:    char buffer[1024];
        -:   93:    while (true) {
        7:   94:        memset(buffer, 0, sizeof(buffer)); // Clear the buffer
        7:   95:        ssize_t bytes_read = read(client_fd, buffer, sizeof(buffer) - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:   96:        if (bytes_read <= 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   97:            if (bytes_read == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   98://                std::cout << "Client " << client_fd << " disconnected." << std::endl;
        -:   99:            } else {
    #####:  100:                std::cerr << "Error reading from client " << client_fd << ": " << strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
        -:  101:            }
    #####:  102:            break; // Exit the loop if client disconnects or an error occurs
        -:  103:        }
        7:  104:        Command command=getCommandFromString(buffer);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        7:  105:        commandExecutor.processCommand(client_fd,command);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  106:        if(command==Command::Exit){
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        1:  107:          break;
        -:  108:        }
        6:  109:    }
        1:  110:    close(client_fd); // Close the client socket
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  111:}
call    0 returned 100%
call    1 never executed
function main called 1 returned 100% blocks executed 76%
        1:  112:int main() {
        1:  113:    int server_fd = setup_server();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  114:    std::vector<std::thread> client_threads;
call    0 returned 100%
        -:  115:    // Server thread to handle input for shutdown
function _ZZ4mainENKUlvE_clEv called 1 returned 100% blocks executed 73%
        1:  116:    std::thread shutdown_thread([&]() {
        1:  117:        std::string input;
call    0 returned 100%
        -:  118:        while (true) {
        1:  119:            std::cin >> input;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  120:            if (input == "shutdown") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1:  121:                std::lock_guard<std::mutex> lock(shutdown_mutex); // Lock while setting the flag
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  122:                shutdown_flag.store(true);  // Set shutdown flag
call    0 returned 100%
        1:  123:                break;
        1:  124:            }
call    0 returned 100%
    #####:  125:        }
        2:  126:    });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -:  127:
        -:  128:    while (true) {
        -:  129:        // Poll for incoming connections and check for shutdown
        -:  130:        struct pollfd fds[1];
       29:  131:        fds[0].fd = server_fd;
       29:  132:        fds[0].events = POLLIN; // We're interested in input events (new connections)
        -:  133:
       29:  134:        int poll_result = poll(fds, 1, 1000); // 1-second timeout for polling
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  135:
        -:  136:        {
       29:  137:            std::lock_guard<std::mutex> lock(shutdown_mutex); // Lock to check shutdown flag
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       29:  138:            if (shutdown_flag.load()) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        1:  139:                break; // Exit if shutdown flag is set
        -:  140:            }
       29:  141:        }
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
        -:  142:
       28:  143:        if (poll_result == -1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  144:            std::cerr << "Poll error: " << strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    #####:  145:            break;
       28:  146:        } else if (poll_result == 0) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
       27:  147:            continue; // Timeout, no new connection
        -:  148:        }
        -:  149:
        1:  150:        if (fds[0].revents & POLLIN) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  151:            // Accept and manage multiple clients
        1:  152:            int client_fd = setup_client_connection(server_fd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  153:
        1:  154:            if (client_fd >= 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  155:            client_threads.emplace_back(handle_client, client_fd); // Store the thread                client_thread.detach(); // Detach the thread to allow it to run independently
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  156:         
        -:  157:            }
        -:  158:        }
       28:  159:    }
        -:  160:    
        1:  161:    LFCompute& LF = LFCompute::getInstance();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  162:    LF.cleanup();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  163:    // Close server socket and stop accepting new clients
        1:  164:    close(server_fd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  165:
        -:  166:    // After all clients are processed, join the threads before exiting
        2:  167:    for (auto& t : client_threads) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50%
branch  6 taken 50% (fallthrough)
        1:  168:    if (t.joinable()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  169:        t.join(); // Wait for each thread to finish
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  170:      }
        -:  171:    }
        -:  172:    // Wait for shutdown thread to finish
        1:  173:    if (shutdown_thread.joinable()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  174:        shutdown_thread.join();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  175:    }
        -:  176:
        1:  177:    return 0;
        1:  178:}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
