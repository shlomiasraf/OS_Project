        -:    0:Source:main.cpp
        -:    1:#include <iostream>
        -:    2:#include <thread>
        -:    3:#include <vector>
        -:    4:#include <sys/socket.h>
        -:    5:#include <netinet/in.h>
        -:    6:#include <unistd.h>
        -:    7:#include <mutex>
        -:    8:#include <iostream>
        -:    9:#include <poll.h>  // Include the necessary header for poll()
        -:   10:#include <unistd.h> // Include for close()
        -:   11:#include <atomic>   // For std::atomic
        -:   12:#include <string.h>
        -:   13:#include "ActiveObject.hpp"
        -:   14:#include "CommandExecute.hpp"
        -:   15:#define PORT 9034
        -:   16:const int MAX_CLIENTS = 10; // Maximum number of clients to accept
        -:   17:std::mutex shutdown_mutex;
        -:   18:std::atomic<bool> shutdown_flag(false); // Global shutdown flag
        -:   19:
function _Z23setup_client_connectioni called 2 returned 100% blocks executed 33%
        2:   20:int setup_client_connection(int server_fd) 
        -:   21:{
        -:   22:    // Accept a new client connection
        2:   23:    int client_fd = accept(server_fd, nullptr, nullptr);
call    0 returned 100%
        2:   24:    if (client_fd < 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   25:        if (errno == EAGAIN || errno == EWOULDBLOCK) {
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:   26:            return 0; // Indicate no client connected
        -:   27:        } else {
    #####:   28:            std::cerr << "Failed to accept client: " << strerror(errno) << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   29:            return -1; // Return -1 for other errors
        -:   30:        }
        -:   31:    }
        2:   32:    return client_fd; // Return the client file descriptor if successful
        -:   33:}
        -:   34:
function _Z20getCommandFromStringRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 14 returned 100% blocks executed 92%
       14:   35:Command getCommandFromString(const std::string& commandStr) {
       14:   36:    std::string lowerCommand = commandStr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      14*:   37:    if (!lowerCommand.empty() && lowerCommand.back() == '\n') {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       14:   38:        lowerCommand.pop_back();
call    0 returned 100%
        -:   39:    }
       14:   40:    std::transform(lowerCommand.begin(), lowerCommand.end(), lowerCommand.begin(), ::tolower);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   41:
       14:   42:    if (lowerCommand == "newgraph") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
        2:   43:        return Command::Newgraph;
       12:   44:    } else if (lowerCommand == "prim") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 17% (fallthrough)
branch  4 taken 83%
        2:   45:        return Command::Prim;
       10:   46:    } else if (lowerCommand == "kruskal") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
        2:   47:        return Command::Kruskal;
        8:   48:    } else if (lowerCommand == "addedge") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
        2:   49:        return Command::Addedge;
        6:   50:    } else if (lowerCommand == "removeedge") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
        2:   51:        return Command::Removeedge;
        4:   52:    } else if (lowerCommand == "exit") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        2:   53:        return Command::Exit;
        -:   54:    }
        2:   55:    return Command::Invalid;
       14:   56:}
call    0 returned 100%
call    1 never executed
        -:   57:
function _Z12setup_serverv called 2 returned 100% blocks executed 38%
        2:   58:int setup_server() {
        2:   59:    int server_fd = socket(AF_INET, SOCK_STREAM, 0);
call    0 returned 100%
        2:   60:    if (server_fd == -1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   61:        std::cerr << "Failed to create socket" << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:   62:        exit(EXIT_FAILURE);
call    0 never executed
        -:   63:    }
        -:   64:
        -:   65:    // Set the SO_REUSEADDR option to reuse the port
        2:   66:    int opt = 1;
        2:   67:    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   68:        std::cerr << "setsockopt(SO_REUSEADDR) failed" << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:   69:        exit(EXIT_FAILURE);
call    0 never executed
        -:   70:    }
        -:   71:
        -:   72:    sockaddr_in address;
        2:   73:    address.sin_family = AF_INET;
        2:   74:    address.sin_addr.s_addr = INADDR_ANY;
        2:   75:    address.sin_port = htons(PORT);
        -:   76:
        2:   77:    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   78:        std::cerr << "Bind failed: " << strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    #####:   79:        close(server_fd);  // Ensure we close the socket on failure
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   80:        exit(EXIT_FAILURE);
call    0 never executed
        -:   81:    }
        -:   82:
        2:   83:    if (listen(server_fd, 3) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   84:        std::cerr << "Listen failed: " << strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    #####:   85:        close(server_fd);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   86:        exit(EXIT_FAILURE);
call    0 never executed
        -:   87:    }
        2:   88:    return server_fd;
        -:   89:}
        -:   90:
function _Z13handle_clienti called 2 returned 100% blocks executed 46%
        2:   91:void handle_client(int client_fd) {
        2:   92:     CommandExecute commandExecutor;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   93:    char buffer[1024];
        -:   94:    while (true) {
       14:   95:        memset(buffer, 0, sizeof(buffer)); // Clear the buffer
       14:   96:        ssize_t bytes_read = read(client_fd, buffer, sizeof(buffer) - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:   97:        if (bytes_read <= 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   98:            if (bytes_read == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   99:                std::cout << "Client " << client_fd << " disconnected." << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -:  100:            } else {
    #####:  101:                std::cerr << "Error reading from client " << client_fd << ": " << strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
        -:  102:            }
    #####:  103:            break; // Exit the loop if client disconnects or an error occurs
        -:  104:        }
       14:  105:        Command command=getCommandFromString(buffer);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
       14:  106:        commandExecutor.processCommand(client_fd,command);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  107:        if(command==Command::Exit){
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        2:  108:          break;
        -:  109:        }
       12:  110:    }
        2:  111:    close(client_fd); // Close the client socket
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  112:}
call    0 returned 100%
call    1 never executed
        -:  113:
function main called 2 returned 100% blocks executed 76%
        2:  114:int main() {
        2:  115:    int server_fd = setup_server();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  116:    std::vector<std::thread> client_threads;
call    0 returned 100%
        -:  117:    // Server thread to handle input for shutdown
function _ZZ4mainENKUlvE_clEv called 2 returned 100% blocks executed 73%
        2:  118:    std::thread shutdown_thread([&]() {
        2:  119:        std::string input;
call    0 returned 100%
        -:  120:        while (true) {
        2:  121:            std::cin >> input;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  122:            if (input == "shutdown") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        2:  123:                std::lock_guard<std::mutex> lock(shutdown_mutex); // Lock while setting the flag
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  124:                shutdown_flag.store(true);  // Set shutdown flag
call    0 returned 100%
        2:  125:                break;
        2:  126:            }
call    0 returned 100%
    #####:  127:        }
        4:  128:    });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -:  129:
        -:  130:    while (true) {
        -:  131:        // Poll for incoming connections and check for shutdown
        -:  132:        struct pollfd fds[1];
       58:  133:        fds[0].fd = server_fd;
       58:  134:        fds[0].events = POLLIN; // We're interested in input events (new connections)
        -:  135:
       58:  136:        int poll_result = poll(fds, 1, 1000); // 1-second timeout for polling
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  137:
        -:  138:        {
       58:  139:            std::lock_guard<std::mutex> lock(shutdown_mutex); // Lock to check shutdown flag
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       58:  140:            if (shutdown_flag.load()) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        2:  141:                break; // Exit if shutdown flag is set
        -:  142:            }
       58:  143:        }
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
        -:  144:
       56:  145:        if (poll_result == -1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  146:            std::cerr << "Poll error: " << strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    #####:  147:            break;
       56:  148:        } else if (poll_result == 0) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
       54:  149:            continue; // Timeout, no new connection
        -:  150:        }
        -:  151:
        2:  152:        if (fds[0].revents & POLLIN) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  153:            // Accept and manage multiple clients
        2:  154:            int client_fd = setup_client_connection(server_fd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  155:
        2:  156:            if (client_fd >= 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  157:            client_threads.emplace_back(handle_client, client_fd); // Store the thread                client_thread.detach(); // Detach the thread to allow it to run independently
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  158:         
        -:  159:            }
        -:  160:        }
       56:  161:    }
        2:  162:    Pipeline& pipe = Pipeline::getInstance();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  163:    pipe.cleanup();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  164:    // Close server socket and stop accepting new clients
        2:  165:    close(server_fd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  166:
        -:  167:    // After all clients are processed, join the threads before exiting
        4:  168:    for (auto& t : client_threads) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50%
branch  6 taken 50% (fallthrough)
        2:  169:    if (t.joinable()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  170:        t.join(); // Wait for each thread to finish
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  171:      }
        -:  172:    }
        -:  173:    // Wait for shutdown thread to finish
        2:  174:    if (shutdown_thread.joinable()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  175:        shutdown_thread.join();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  176:    }
        -:  177:
        2:  178:    return 0;
        2:  179:}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
