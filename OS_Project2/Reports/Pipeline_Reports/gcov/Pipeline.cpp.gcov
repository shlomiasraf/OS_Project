        -:    0:Source:Pipeline.cpp
        -:    1:#include "Pipeline.hpp"
        -:    2:#include "MSTFactory.hpp"
        -:    3:
        -:    4:Pipeline* Pipeline::instance = nullptr;
        -:    5:std::mutex Pipeline::creation;
        -:    6:
function _ZN8Pipeline11getInstanceEv called 4 returned 100% blocks executed 64%
        4:    7:Pipeline& Pipeline::getInstance() {
        4:    8:    std::unique_lock<std::mutex> lock(creation);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:    9:    if (instance == nullptr) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   10:        instance = new Pipeline(); // Assign new instance if null
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 never executed (fallthrough)
branch  7 never executed
call    8 never executed
        -:   11:    }
        4:   12:    return *instance; // Return the instance
        4:   13:}
call    0 returned 100%
call    1 never executed
        -:   14:
function _ZN8PipelineC2Ev called 2 returned 100% blocks executed 67%
        2:   15:Pipeline::Pipeline() {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
        -:   16:    // Emplace back to create instances of ActiveObject
       14:   17:    for (int i = 0; i < 6; ++i) {
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       12:   18:        executors.emplace_back(std::make_unique<ActiveObject>());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:   19:    }
        -:   20:    // Start each executor
       14:   21:    for (auto& executor : executors) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 86%
branch  6 taken 14% (fallthrough)
       12:   22:        executor->start();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:   23:    }
        2:   24:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
function _ZN8Pipeline7cleanupEv called 2 returned 100% blocks executed 100%
        2:   25:void Pipeline::cleanup() {
        2:   26:    std::unique_lock<std::mutex> lock(creation);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   27:    delete instance;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
        2:   28:    instance = nullptr;
        2:   29:}
call    0 returned 100%
        -:   30:
function _ZN8PipelineD2Ev called 2 returned 100% blocks executed 100%
        2:   31:Pipeline::~Pipeline() {
       14:   32:    for (auto& executor : executors) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 86%
branch  6 taken 14% (fallthrough)
       12:   33:        executor->stop(); // Assuming you have a stop method
call    0 returned 100%
call    1 returned 100%
        -:   34:    }
        2:   35:}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   36:
function _ZN8Pipeline15threadSafePrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 24 returned 100% blocks executed 75%
       24:   37:void Pipeline::threadSafePrint(const std::string& message) {
       24:   38:    std::lock_guard<std::mutex> lock(coutMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       24:   39:    std::cout << message << std::endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       24:   40:}
call    0 returned 100%
call    1 never executed
        -:   41:
function _ZN8Pipeline3runER5Graphi7Command called 4 returned 100% blocks executed 46%
        4:   42:void Pipeline::run(Graph& graph, int clientfd,Command type) {
        4:   43:    MSTResult result({}, 0, 0, 0);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:   44:    // Create a mutex for this specific client
        4:   45:    std::mutex clientMutex;
        4:   46:    std::condition_variable clientCv;
call    0 returned 100%
        4:   47:    std::atomic<int> completedTasks{0};
        -:   48:
        -:   49:    // Notify and increment
function _ZZN8Pipeline3runER5Graphi7CommandENKUlvE_clEv called 24 returned 100% blocks executed 100%
       24:   50:    auto notifyAndIncrement = [&]() {
       24:   51:        std::lock_guard<std::mutex> lock(clientMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       24:   52:        completedTasks++;
call    0 returned 100%
       24:   53:        clientCv.notify_all();
call    0 returned 100%
       28:   54:    };
call    0 returned 100%
        -:   55:
        -:   56:    // Vector to hold task completion status
        4:   57:    std::vector<bool> taskCompletionStatus(6, false); // Assuming 6 tasks
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:   58:
function _ZZN8Pipeline3runER5Graphi7CommandENKUlSt8functionIFvvEEiE_clES5_i called 24 returned 100% blocks executed 82%
       24:   59:    auto passTask = [&](std::function<void()> taskFunction, int dependencyIndex = -1) {
       24:   60:        if (dependencyIndex != -1) {
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       20:   61:            std::unique_lock<std::mutex> lock(clientMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _ZZZN8Pipeline3runER5Graphi7CommandENKUlSt8functionIFvvEEiE_clES5_iENKUlvE_clEv called 20 returned 100% blocks executed 68%
       60:   62:            clientCv.wait(lock, [&] { return completedTasks.load() > dependencyIndex; });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
       20:   63:        }
call    0 returned 100%
call    1 never executed
        -:   64:
        -:   65:        // Directly call the task function instead of using std::async
       24:   66:        taskFunction();
call    0 returned 100%
       24:   67:        notifyAndIncrement();
call    0 returned 100%
       24:   68:    };
        -:   69:
        -:   70:    // Task 1: Calculate MST
function _ZZN8Pipeline3runER5Graphi7CommandENKUlvE0_clEv called 4 returned 100% blocks executed 64%
        8:   71:    passTask([&, type]() {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        4:   72:        std::string message="MST Calculation..";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   73:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   74:       auto mstAlgo = MSTFactory::create(type); // Assuming this returns a unique_ptr<MSTAlgo>
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   75:        // Calculate MST using the provided MSTAlgo instance
        4:   76:        result.mst = mstAlgo->FindMST(graph);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
        -:   77:    
        4:   78:    });
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        -:   79:
        -:   80:    // Task 2: Calculate Total Weight
function _ZZN8Pipeline3runER5Graphi7CommandENKUlvE1_clEv called 4 returned 100% blocks executed 67%
        4:   81:    passTask([&]() {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        4:   82:        result.totalWeight = MSTInfo::calculateTotalWeight(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        4:   83:        std::string message = "Finish task 2";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   84:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   85:    }, 0);
call    0 returned 100%
call    1 never executed
        -:   86:
        -:   87:    // Task 3: Calculate Average Distance
function _ZZN8Pipeline3runER5Graphi7CommandENKUlvE2_clEv called 4 returned 100% blocks executed 67%
        4:   88:    passTask([&]() {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        4:   89:        result.averageDistance = MSTInfo::calculateAverageDistance(result.totalWeight, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        4:   90:        std::string message = "Finish task 3";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   91:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   92:    }, 1);
call    0 returned 100%
call    1 never executed
        -:   93:
        -:   94:    // Task 4: Calculate Longest Distance
function _ZZN8Pipeline3runER5Graphi7CommandENKUlvE3_clEv called 4 returned 100% blocks executed 67%
        4:   95:    passTask([&]() {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        4:   96:        result.longestDistance = MSTInfo::findLongestDistance(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        4:   97:        std::string message = "Finish task 4";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   98:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   99:    }, 2);
call    0 returned 100%
call    1 never executed
        -:  100:
        -:  101:    // Task 5: Calculate Shortest Distance
function _ZZN8Pipeline3runER5Graphi7CommandENKUlvE4_clEv called 4 returned 100% blocks executed 67%
        4:  102:    passTask([&]() {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        4:  103:        result.shortestDistance = MSTInfo::calculateShortestDistance(result.mst, result.mst.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        4:  104:        std::string message = "Finish task 5";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  105:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  106:    }, 3);
call    0 returned 100%
call    1 never executed
        -:  107:
        -:  108:    // Task 6: Send Info
function _ZZN8Pipeline3runER5Graphi7CommandENKUlvE5_clEv called 4 returned 100% blocks executed 64%
        4:  109:    passTask([&, clientfd]() {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        4:  110:        result.sendMSTDetails(clientfd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  111:        std::string message = "Finish task 6";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  112:        threadSafePrint(message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  113:    }, 4);\
call    0 returned 100%
call    1 never executed
        -:  114:    
        -:  115:       // Wait for all tasks to complete
        -:  116:    {
        4:  117:        std::unique_lock<std::mutex> lock(clientMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _ZZN8Pipeline3runER5Graphi7CommandENKUlvE6_clEv called 4 returned 100% blocks executed 68%
       12:  118:        clientCv.wait(lock, [&] { return completedTasks.load() == 6; }); // Wait until all tasks are completed
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  119:    }
call    0 returned 100%
call    1 never executed
        4:  120:}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 never executed
call    4 never executed
call    5 never executed
