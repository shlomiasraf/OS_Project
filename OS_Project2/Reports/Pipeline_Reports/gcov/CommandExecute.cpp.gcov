        -:    0:Source:CommandExecute.cpp
        -:    1:#include "CommandExecute.hpp"
        -:    2:#include <iostream>
        -:    3:#include <sstream>
        -:    4:#include <cstring>
        -:    5:#include <unistd.h>
        -:    6:
function _ZN14CommandExecute14processCommandEi7Command called 14 returned 100% blocks executed 100%
       14:    7:Command CommandExecute::processCommand(int client_fd, Command command) {
       14:    8:        switch (command) { 	     
branch  0 taken 14%
branch  1 taken 14%
branch  2 taken 14%
branch  3 taken 29%
branch  4 taken 14%
branch  5 taken 14%
        2:    9:      	     case Command::Newgraph:
        2:   10:                Newgraph(client_fd);
call    0 returned 100%
        2:   11:                break;
        -:   12:      	     
        2:   13:            case Command::Addedge:
        2:   14:                AddEdge(client_fd);
call    0 returned 100%
        2:   15:                break;
        -:   16:            
        2:   17:            case Command::Removeedge:
        2:   18:                RemoveEdge(client_fd);
call    0 returned 100%
        2:   19:                break;
        -:   20:     
        4:   21:            case Command::Prim:
        -:   22:            case Command::Kruskal:
        4:   23:                getMSTAlgorithm(command, client_fd);
call    0 returned 100%
        4:   24:                break;
        2:   25:             case Command::Exit:
        2:   26:             	break;
        2:   27:            default:     
        2:   28:                break;
        -:   29:      		  }
       14:   30:    return command;
        -:   31:}
        -:   32:
function _ZN14CommandExecute7AddEdgeEi called 2 returned 100% blocks executed 68%
        2:   33:void CommandExecute::AddEdge(int client_fd) {
        -:   34:
        2:   35:    std::string message = "Enter edge to add (i, j, weight): \n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   36:    std::cout << std::flush;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   37:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:   38:    char buf[256];
        2:   39:    int nbytes = recv(client_fd, buf, sizeof(buf) - 1, 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   40:    buf[nbytes] = '\0';
        -:   41:    int u, v, weight;
        2:   42:    std::istringstream edgeIss(buf);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:   43:    edgeIss >> u >> v >> weight;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        2:   44:    if(u <= graph.V && v <= graph.V)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   45:    {
        2:   46:        graph.addEdge(u - 1, v - 1, weight);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   47:        message = "Edge was created successfully!\n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   48:    }
        -:   49:    else
        -:   50:    {
    #####:   51:        message = "Invalid edge\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   52:    }
        -:   53:
        2:   54:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        2:   55:}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        -:   56:
function _ZN14CommandExecute10RemoveEdgeEi called 2 returned 100% blocks executed 67%
        2:   57:void CommandExecute::RemoveEdge(int client_fd) {
        -:   58:    int i, j;
        2:   59:    std::string message = "Enter edge to remove (i j): \n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   60:    std::cout << std::flush;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   61:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:   62:    char buf[256];
        2:   63:    int nbytes = recv(client_fd, buf, sizeof(buf) - 1, 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   64:    buf[nbytes] = '\0';
        2:   65:    std::istringstream edgeIss(buf);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:   66:    edgeIss >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:   67:    if(i <= graph.V && j <= graph.V)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   68:    {
        2:   69:        graph.removeEdge(i - 1, j - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   70:        message = "Edge was removed successfully!\n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   71:    }
        -:   72:    else
        -:   73:    {
    #####:   74:        message = "Invalid edge\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   75:    }
        -:   76:
        2:   77:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        2:   78:}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        -:   79:
function _ZN14CommandExecute8NewgraphEi called 2 returned 100% blocks executed 74%
        2:   80:void CommandExecute::Newgraph(int client_fd) {
        -:   81:    int vertex, edges;
        2:   82:    std::lock_guard<std::mutex> lock(resultMutex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   83:
        2:   84:    std::string message = "Please enter the number of vertices and edges: \n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   85:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        2:   86:    fflush(stdout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   87:    char buf[256];
        2:   88:    std::string input;
call    0 returned 100%
        2:   89:    memset(buf, 0, sizeof(buf));
        -:   90:    // Read vertices and edges
        2:   91:    int nbytes = recv(client_fd, buf, sizeof(buf) - 1, 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   92:    if (nbytes <= 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   93:        std::cerr << "Error receiving data from client.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   94:        return;
        -:   95:    }
        2:   96:    message = "Enter edges to add (i, j, weight): \n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   97:    buf[nbytes] = '\0';
        2:   98:    input = buf;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   99:    std::istringstream iss(input);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  100:    if (!(iss >> vertex >> edges)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  101:        std::cerr << "Error parsing vertex/edges input.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  102:        return;
        -:  103:    }
        2:  104:    graph = Graph(vertex, edges);   
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        2:  105:    memset(buf, 0, sizeof(buf));
        2:  106:    message = "Please enter the edges (u v weight): \n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  107:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        2:  108:    fflush(stdout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  109:    // Read edges
        9:  110:    for (int i = 0; i < edges; ++i) {
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        7:  111:        input.clear();
call    0 returned 100%
        7:  112:        memset(buf, 0, sizeof(buf));
        7:  113:        nbytes = recv(client_fd, buf, sizeof(buf) - 1, 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  114:        if (nbytes <= 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  115:            std::cerr << "Error receiving edge data.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  116:            return;
        -:  117:        }
        7:  118:        buf[nbytes] = '\0';
        7:  119:        input = buf;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  120:
        -:  121:        int u, v, weight;
        7:  122:        std::istringstream edgeStream(input);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  123:        if (!(edgeStream >> u >> v >> weight)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 14% (fallthrough)
branch 13 taken 86%
        1:  124:            message = "Invalid edge input format. Please retry.\n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  125:            send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        1:  126:            fflush(stdout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  127:            --i;  // Retry this edge
        1:  128:            continue;
        -:  129:        }
        -:  130:
        6:  131:       graph.addEdge(u - 1, v - 1, weight);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  132:    }
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
call    3 never executed
        -:  133:
        2:  134:    message = "Graph created successfully.\n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  135:    send(client_fd, message.c_str(), message.size(), 0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        2:  136:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -:  137:
        -:  138:
        -:  139:
function _ZN14CommandExecute15getMSTAlgorithmE7Commandi called 4 returned 100% blocks executed 56%
        4:  140:void CommandExecute::getMSTAlgorithm(Command type, int client_fd) 
        -:  141:{
        4:  142:    std::string message;
call    0 returned 100%
        4:  143:     if (graph.V < 2) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  144:        message = "Cannot Compute MST on Graphs with fewer than 2 vertices.\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  145:        send(client_fd, message.c_str(), message.size(), 0);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  146:        return;
        -:  147:    }
        4:  148:        pipe.run(graph, client_fd,type);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  149:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 never executed
        -:  150:
        -:  151:
        -:  152:
